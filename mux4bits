module mux_1bit_4x1 (
    input wire a, b, c, d,
    input wire [1:0] sel,
    output wire y
);
    wire not_sel0, not_sel1;
    wire and0, and1, and2, and3;

    not u0 (not_sel0, sel[0]);
    not u1 (not_sel1, sel[1]);

    and u2 (and0, a, not_sel1, not_sel0); // 00
    and u3 (and1, b, not_sel1, sel[0]);   // 01
    and u4 (and2, c, sel[1], not_sel0);   // 10
    and u5 (and3, d, sel[1], sel[0]);     // 11

    or u6 (y, and0, and1, and2, and3);
endmodule


module mux_4bit_structural (
    input wire [3:0] data_in0,
    input wire [3:0] data_in1,
    input wire [3:0] data_in2,
    input wire [3:0] data_in3,
    input wire [1:0] sel,
    output wire [3:0] data_out
);
    // Instanciando mux_1bit_4x1 para cada bit
    mux_1bit_4x1 mux0 (
        .a(data_in0[0]),
        .b(data_in1[0]),
        .c(data_in2[0]),
        .d(data_in3[0]),
        .sel(sel),
        .y(data_out[0])
    );

    mux_1bit_4x1 mux1 (
        .a(data_in0[1]),
        .b(data_in1[1]),
        .c(data_in2[1]),
        .d(data_in3[1]),
        .sel(sel),
        .y(data_out[1])
    );

    mux_1bit_4x1 mux2 (
        .a(data_in0[2]),
        .b(data_in1[2]),
        .c(data_in2[2]),
        .d(data_in3[2]),
        .sel(sel),
        .y(data_out[2])
    );

    mux_1bit_4x1 mux3 (
        .a(data_in0[3]),
        .b(data_in1[3]),
        .c(data_in2[3]),
        .d(data_in3[3]),
        .sel(sel),
        .y(data_out[3])
    );
endmodule
